<!-- livebook:{"autosave_interval_s":60} -->

# Soma: Word frequency analysis

```elixir
Mix.install([
  {:kino, "~> 0.12.3"}
])
```

## Synopsis

Soma is a small program for the analysis of texts, an outgrowth of an exercise from _Think OCaml_, an OCaml programming textbook (Downey & Monje, 2008, p. 105). The exercise itself is aimed at text manipulation and deriving interesting comparative conclusions between different works, as well as comparisons between the styles of different writers.

My aim was somewhat different, in that making writing style comparisons—while interesting—aren't a desirable end goal. Instead, deriving word corpora with their frequencies provides a wonderful language-learning tool, as the list of words used within works is a rich vocabulary of actually-used words in the target language, which can be learned with a flashcard learning method.

## Reading a file

To start, we need to choose the file Soma will read from. `Kino` provides us with a graphical interface, making this an easy task for the user.

```elixir
file = Kino.Input.file("Select an input file")
```

`Kino` returns a tuple for a selected file, with `file_ref` as the most important value. Capturing it here makes it easy to use later to get the absolute file path.

```elixir
%{file_ref: file_ref} =
  file
  |> Kino.Input.read()
```

Using the previously captured `file_ref`, we obtain the file's absolute path, and are able to read it, as required in the following steps.

```elixir
file_ref
|> Kino.Input.file_path()
|> File.read!()
```

## Break lines into words; strip whitespace and punctuation from words; convert to lowercase

Breaking a line of text into words is fairly straightforward, with a few possible points of failure which we must guard against:

* Irregular spacing
* Punctuation
* Word case

It is likely that imported text may have erroneously-added spacing. Common examples of how this can happen include text that was written on a typewriter, or by a writer with typewriter habits (Butterick, 2024); space inserted in error by OCR software misrecognising the source scanned material; unusual text formatting habits employed by the author.

<!-- livebook:{"break_markdown":true} -->

To help detect some of these errors, we will define an example sentence including the above problems, to be stored in the `sample_sentence` variable.

```elixir
sample_sentence = "The  quick    brown   fox jumped over the  LAZY dogs.  "
```

```elixir
sample_sentence
|> String.split()
|> Enum.map(fn word -> String.replace(word, ~r/[\p{P}\p{S}]/, "") end)
|> Enum.map(fn word -> String.downcase(word) end)
```

## References

* Downey, A., & Monje, N. (2008). Think OCaml: How to Think Like a Functional Programmer (Version 0.1.1). Green Tea Press; The LATEX source for this book is available from http://www.thinkpython.com. https://greenteapress.com/thinkocaml/thinkocaml.pdf

* Butterick, M. (2024, April 16). Typewriter habits | Butterick’s Practical Typography. https://practicaltypography.com
